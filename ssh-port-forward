#!/bin/bash

print_usage() {
    printf "%s\n\t%s\n\t%s\n" "Usage:" "$0 <forward_name> <local_port> <forwarded_host> <forwarded_port> <ssh_host>" "$0 -f <config_file>"
}

print_help() {
    print_usage
    echo ""
	echo "common options:"
    echo "    -f <config file>"
	echo "    -b <forward_name>       Opens the specified forward in the default browser"
	echo "    -h|--help               Prints this help message"
	echo "    -k <forward_name>       Closes the forward by the specified name"
	echo "    -l                      Lists all currently forwarded ports"
	echo ""
	echo "SSH options:"
	echo "    -i <identity_file>      Specify ssh keyfile to use for authentication"
	echo "    -p <ssh_port>           Specify a port that the ssh server is running on"
	echo ""
	echo "Browser options:"
	echo "    -s                      Use HTTP instead of HTTPS when opening in the browser"
    echo "    -o                      Setup forwarding and open in browser"
    echo ""
}

VAR_USER_DIR="/var/run/user/$UID"
SILENT_MODE=true
SSL=true

do_forward() {

    [ ! -d "$VAR_USER_DIR" ] && {
        echo "Directory $VAR_USER_DIR does not exist. This is required for runtime file storage"
        exit 1
    }

    [ ! -d "$VAR_USER_DIR/ssh-port-forward" ] && mkdir "$VAR_USER_DIR/ssh-port-forward"

    cd "$VAR_USER_DIR/ssh-port-forward" || exit 1

    [ -f "$VAR_USER_DIR/ssh-port-forward/$FORWARD_NAME" ] && {
	    echo "$VAR_USER_DIR/ssh-port-forward/$FORWARD_NAME already exists. Check if ssh forward is already running"
	    exit 1
    }

    [ -f "$VAR_USER_DIR/ssh-port-forward/$FORWARD_NAME-ssh.run" ] && {
        echo "$VAR_USER_DIR/ssh-port-forward/$FORWARD_NAME-ssh.run already exists. Check if ssh forward is already running or was not closed correctly"
        exit 1
    }

    [ -z "$SSH_PORT" ] && SSH_PORT=22

    if [ -n "$IDENTITY_FILE" ]; then
        if ! ssh -M -S "$FORWARD_NAME" -f -N -L "$LOCAL_PORT:$FORWARDED_HOST:$FORWARDED_PORT" -p $SSH_PORT "$SSH_HOST" -i "$IDENTITY_FILE"; then
            exit 1
        fi
    else
        if ! ssh -M -S "$FORWARD_NAME" -f -N -L "$LOCAL_PORT:$FORWARDED_HOST:$FORWARDED_PORT" -p $SSH_PORT "$SSH_HOST"; then
            exit 1
        fi
    fi

    {
        echo "FORWARD_NAME:$FORWARD_NAME";
        echo -n "PID:";
        ssh -S "$FORWARD_NAME" -O check "$FORWARD_NAME" 2>&1 >/dev/null | grep -o -P '(?<=\=).*(?=\))';
        echo "LOCAL_PORT:$LOCAL_PORT";
        echo "FORWARDED_HOST:$FORWARDED_HOST";
        echo "FORWARDED_PORT:$FORWARDED_PORT";
        echo "SSL:$SSL";
    } >> "/var/run/user/$UID/ssh-port-forward/$FORWARD_NAME-ssh.run"

    [ "$SILENT_MODE" == false ] && open_in_browser "$FORWARD_NAME"
}

open_in_browser() {
    LOCAL_PORT=$( sed -n 's/LOCAL_PORT://p' "$1-ssh.run" )
    # SSL=$( sed -n 's/ssl://p' "$1-ssh.run" )

    PROTOCOL='https'
    [ -z "$SSL" ] && PROTOCOL='http'

    echo "Opening $PROTOCOL://localhost:$LOCAL_PORT/"
    xdg-open "$PROTOCOL://localhost:$LOCAL_PORT/"
}

kill_forward() {
	FORWARD_TO_KILL=$1

	if [ ! -f "/var/run/user/$UID/ssh-port-forward/$FORWARD_TO_KILL-ssh.run" ]; then
		echo "File /var/run/user/$UID/ssh-port-forward/$FORWARD_TO_KILL-ssh.run cannot be found. Cannot kill ssh process. Maybe it has already ended"
		exit 1
	elif [ ! -S "/var/run/user/$UID/ssh-port-forward/$FORWARD_TO_KILL" ]; then
		echo "ssh control socket is missing. Try killing the PID listed in /var/run/user/$UID/ssh-port-forward/$FORWARD_TO_KILL-ssh.run manually"
		exit 1
	fi
	echo "Killing ssh port forward: $FORWARD_TO_KILL"
	cd "/var/run/user/$UID/ssh-port-forward"
	kill $( sed -n 's/PID://p' "$FORWARD_TO_KILL-ssh.run" )
	echo "Deleting /var/run/user/$UID/ssh-port-forward/$FORWARD_TO_KILL-ssh.run"
	rm $FORWARD_TO_KILL-ssh.run
}

list_forwards() {
	i=0
	for filename in /var/run/user/$UID/ssh-port-forward/*.run; do
		cd /var/run/user/$UID/ssh-port-forward
		if [[ "$filename" == "/var/run/user/$UID/ssh-port-forward/*.run" ]]; then
			break
		fi
		FORWARD_NAME=$( sed -n 's/FORWARD_NAME://p' "$filename" )
		PID=$( sed -n 's/PID://p' "$filename" )
		LOCAL_PORT=$( sed -n 's/LOCAL_PORT://p' "$filename" )
		FORWARDED_HOST=$( sed -n 's/FORWARDED_HOST://p' "$filename" )
		FORWARDED_PORT=$( sed -n 's/FORWARDED_PORT://p' "$filename" )
		echo "$FORWARD_NAME: (PID: $PID)"
		echo "        LOCAL: $LOCAL_PORT"
		echo "        REMOTE: $FORWARDED_HOST:$FORWARDED_PORT"
		((i++))
	done
	echo "$i forwards in /var/run/user/$UID/ssh-port-forward/"
}

load_config() {
    CONFIG_FILE="$1.conf"
    # bad ?
    . "$CONFIG_FILE"
    if [ -z "$FORWARD_NAME" ] || [ -z "$LOCAL_PORT" ] || [ -z "$FORWARDED_HOST" ] || [ -z "$FORWARDED_PORT" ] || [ -z "$SSH_HOST" ]; then
        echo "Not enough arguments given"
        exit 1
    fi
}

# TODO: rewrite args processing
if [ "$1" == "--help" ] || [ "$1" == "-help" ]; then
	print_help
	exit 0
fi

while getopts ":b:hi:k:lp:sf:o" opt; do
	case ${opt} in 
		b )
			open_in_browser "$OPTARG"
			exit 0
			;;
		h )
			print_help
			exit 0
			;;
		i )
			IDENTITY_FILE=$OPTARG
			;;
		k )
			kill_forward "$OPTARG"
			exit 0
			;;
		l )
			list_forwards
			exit 0
			;;
		p )
			SSH_PORT="$OPTARG"
			;;
		s )
			SSL=false
			;;
        f )
            CONFIG="${OPTARG%.*}"
            load_config "$CONFIG"
            do_forward
            exit 0
            ;;
        o )
            SILENT_MODE=false
            ;;
		\? )
			echo "Invalid Option: -$OPTARG" 1>&2
			echo ""
			print_help
			exit 1
			;;
		: )
			echo "Invalid option: $OPTARG requires an argument" 1>&2
			;;
	esac
done
shift $((OPTIND -1))

if [ "$1" == "" ] || [ "$2" == "" ] || [ "$3" == "" ] || [ "$4" == "" ] || [ "$5" == "" ]; then
    echo "Not enough arguments given"
    print_usage
	exit 1
fi

FORWARD_NAME=$1
LOCAL_PORT=$2
FORWARDED_HOST=$3
FORWARDED_PORT=$4
SSH_HOST=$5

do_forward
